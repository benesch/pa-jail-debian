#! /bin/sh
if ! expr "$0" : '.*[/]' >/dev/null; then PROGDIR=./
else PROGDIR=`echo "$0" | sed 's,^\(.*/\)[^/]*$,\1,'`; fi
expr "$PROGDIR" : '[/]' >/dev/null || PROGDIR="`pwd`/$PROGDIR"
PROGDIR=`echo "$PROGDIR" | sed 's,/$,,'`
LIBDIR="$PROGDIR/../lib/"
. ${LIBDIR}dbhelper.sh

usage () {
    echo "Usage: gitcheckoutinto [-s SUBDIR] DIR CACHEID COMMIT [OVERLAY]" 1>&2
    exit $1
}

fail () {
    echo "$@" 1>&2
    exit 1
}

test -z "$GITSSH_REPOCACHE" && GITSSH_REPOCACHE="${MAINDIR}repo"
if [ ! -d "$GITSSH_REPOCACHE" ]; then
    echo "Bad GITSSH_REPOCACHE" 1>&2
    usage 1
fi

subdir=""
case "$1" in
    -s)
        test -n "$2" || usage 1; subdir="/$2"; shift 2;;
    -s*)
        subdir="/`echo "$1" | sed 's,^..,,'`"; shift;;
esac
if [ "$#" != 3 -a "$#" != 4 ]; then
    usage 1
fi
checkoutdir="$1"; cacheid="$2"; commit="$3"; overlaytarball="$4"


# Check arguments
repo_dir="$GITSSH_REPOCACHE/repo$cacheid"
expr "$repo_dir" : '[/]' >/dev/null || repo_dir="`pwd`/$repo_dir"
if [ ! -d "$repo_dir" ]; then
    fail "$repo_dir: Repository directory does not exist"
fi

test "$overlaytarball" = - && overlaytarball=
if [ -n "$overlaytarball" ]; then
    expr "$overlaytarball" : '[/]' >/dev/null || \
        overlaytarball="`pwd`/$overlaytarball"
    if [ ! -r "$overlaytarball" ]; then
        fail "$overlaytarball: Overlay tarball not readable"
    fi
fi


# Create destination directory, check out code there
dest_dir="$checkoutdir$subdir"
if [ ! -d "$dest_dir" ]; then
    mkdir -p "$dest_dir" || fail "$dest_dir: Failed to create"
fi

branch="gitcheckoutinto_`date +%s`"
create_branch () {
    ( cd "$repo_dir" && git branch "$branch" "$commit" )
}
checkout_dest () {
    (
        cd "$dest_dir" &&
        if test ! -d .git; then
            git init --shared=group
        fi &&
        git fetch "$repo_dir" "$branch" &&
        git reset --hard "$commit"
    )
}
delete_branch () {
    ( cd "$repo_dir" && git branch -D "$branch" >/dev/null 2>&1 )
}

create_branch || fail "$repo_dir: Failed to create $branch branch"
checkout_dest || { delete_branch; fail "$dest_dir: Failed to checkout $repo_dir $branch"; }
delete_branch

rm -rf "$dest_dir"/.git "$dest_dir"/.gitcheckout || fail "$dest_dir: Failed to remove .git and .gitcheckout"


# Handle overlay tarball
test -z "$overlaytarball" && exit 0

( cd "$dest_dir"; tar -xf "$overlaytarball" ) || fail "$overlaytarball: Failed to unpack"

run_gitcheckout () {
    (
        cd "$dest_dir" &&
        for action in `cat .gitcheckout`; do
            case "$action" in
                rm:*)
                    rm -rf "`echo "$action" | tail -c +3`";;
            esac
        done
    )
}

if test -r "$dest_dir/.gitcheckout"; then
    run_gitcheckout
fi

exit 0
